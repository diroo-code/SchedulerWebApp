@page "/Add-Shifts"
@layout MainLayout
@using staffschedulerlibrary.Models
@inject HttpClient Http
@inject DatabaseManager _databaselogic


<h3>Add Shift</h3>

<EditForm Model="shift" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="shiftId" class="form-label">Shift ID</label>
        <InputNumber id="shiftId" @bind-Value="shift.ShiftId" class="form-control" required />
        <ValidationMessage For="@(() => shift.ShiftId)" />
    </div>

    <div class="mb-3">
        <label for="startTime" class="form-label">Start Time (UTC)</label>
        <InputText id="startTime" @bind-Value="startTimeInput" class="form-control" required placeholder="yyyy-MM-ddTHH:mm" />
        <ValidationMessage For="@(() => shift.StartTime)" />
    </div>

    <div class="mb-3">
        <label for="endTime" class="form-label">End Time (UTC)</label>
        <InputText id="endTime" @bind-Value="endTimeInput" class="form-control" required placeholder="yyyy-MM-ddTHH:mm" />
        <ValidationMessage For="@(() => shift.EndTime)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Shift</button>
    <button type="button" class="btn btn-secondary" @onclick="LoadShiftList">Update Shift List</button>
</EditForm>

@if (shiftList != null && shiftList.Count > 0)
{
    <h4 class="mt-4">Shift List</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Shift ID</th>
                <th>Start Time (UTC)</th>
                <th>End Time (UTC)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in shiftList)
            {
                <tr>
                    <td>@s.ShiftId</td>
                    <td>@s.StartTime.ToString("yyyy-MM-ddTHH:mm:ssZ")</td>
                    <td>@s.EndTime.ToString("yyyy-MM-ddTHH:mm:ssZ")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="mt-4">No shifts added yet.</p>
}

@code {
    private Shift shift = new Shift(); // Initialize shift to a new instance
    private List<Shift> shiftList = new List<Shift>(); // Initialize shiftList to an empty list
    private string startTimeInput; // For binding the input text for start time
    private string endTimeInput; // For binding the input text for end time

    protected override async Task OnInitializedAsync()
    {
        await LoadShiftList();
    }

    private async Task LoadShiftList()
    {
        var response = await Http.GetAsync("/Get-Shift");
        if (response.IsSuccessStatusCode)
        {
            shiftList = await response.Content.ReadFromJsonAsync<List<Shift>>() ?? new List<Shift>();
            Console.WriteLine($"Loaded {shiftList.Count} shifts."); // Debugging line
        }
        else
        {
            Console.WriteLine("Error fetching shift list."); // Debugging line
        }
    }

    private async Task HandleValidSubmit()
    {
        // Convert StartTime and EndTime to UTC before sending
        shift.StartTime = DateTime.SpecifyKind(shift.StartTime, DateTimeKind.Utc);
        shift.EndTime = DateTime.SpecifyKind(shift.EndTime, DateTimeKind.Utc);

        var response = await Http.PostAsJsonAsync("/Add-Shifts", shift);
        if (response.IsSuccessStatusCode)
        {
            // Clear the input fields
            shift = new Shift(); // Reinitialize shift to avoid null reference
                                 // Reload the shift list
            await LoadShiftList();
            Console.WriteLine("Shift added successfully!");
        }
        else
        {
            // Handle error
            Console.WriteLine("Error adding shift.");
        }
    }
}