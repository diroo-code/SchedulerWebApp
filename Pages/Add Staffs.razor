@page "/Add-Staffs"
@layout MainLayout
@using System.Threading.Tasks
@using staffschedulerlibrary.Models
@inject HttpClient Http
@inject DatabaseManager _databaselogic


<h3>Add Staff</h3>

<EditForm Model="staff" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" @bind-Value="staff.Name" class="form-control" required />
        <ValidationMessage For="@(() => staff.Name)" />
    </div>

    <div class="mb-3">
        <label for="position" class="form-label">Position</label>
        <InputText id="position" @bind-Value="staff.Position" class="form-control" required />
        <ValidationMessage For="@(() => staff.Position)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Staff</button>
    <button type="button" class="btn btn-secondary" @onclick="LoadStaffList">Update List</button>
</EditForm>

@if (staffList != null && staffList.Count > 0)
{
    <h4 class="mt-4">Staff List</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in staffList)
            {
                <tr>
                    <td>@s.Name</td>
                    <td>@s.Position</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="mt-4">No staff members added yet.</p>
}

@code {
    private Staff staff = new Staff(); // Initialize staff to a new instance
    private List<Staff> staffList = new List<Staff>(); // Initialize staffList to an empty list

    protected override async Task OnInitializedAsync()
    {
        await LoadStaffList();
    }

    private async Task LoadStaffList()
    {
        var response = await Http.GetAsync("/Get-Staffs");
        if (response.IsSuccessStatusCode)
        {
            staffList = await response.Content.ReadFromJsonAsync<List<Staff>>() ?? new List<Staff>();
            Console.WriteLine($"Loaded {staffList.Count} staff members."); // Debugging line
        }
        else
        {
            Console.WriteLine("Error fetching staff list."); // Debugging line
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/Add-Staffs", staff);
        if (response.IsSuccessStatusCode)
        {
            // Clear the input fields
            staff = new Staff(); // Reinitialize staff to avoid null reference
                                 // Reload the staff list
            await LoadStaffList();
            Console.WriteLine("Staff added successfully!");
        }
        else
        {
            // Handle error
            Console.WriteLine("Error adding staff.");
        }
    }
}